{"version":3,"sources":["Components/HistoryTable/index.js","Services/Currency.js","Components/HistoryChart/index.js","Pages/Main/index.js","Components/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["HistoryTable","history","symbols","map","s","key","item","date","format","Date","toFixed","API_URL","fetchRates","from","to","a","base","axios","get","join","data","axes","primary","type","position","HistoryChart","useMemo","label","h","x","y","className","tooltip","today","Main","useState","setHistory","active","setActive","lastIntervalId","useRef","lastDate","addDays","useEffect","then","Object","keys","rates","sort","b","clearInterval","current","setInterval","day","error","console","log","length","catch","er","onClick","Layout","children","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.61b74e4a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst HistoryTable = ({ history, symbols }) => {\r\n  return (\r\n    <div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            {symbols.map(s => (\r\n              <th key={s}>{s}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {history.map(item => (\r\n            <tr key={item.date}>\r\n              <td>{format(new Date(item.date), \"yyyy-MM-dd\")}</td>\r\n              {symbols.map(s => (\r\n                <td key={s}>{(1 / item[s]).toFixed(2)}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HistoryTable;\r\n","import axios from \"axios\";\r\n\r\nconst API_URL = \"https://api.exchangeratesapi.io\";\r\n\r\nconst fetchRates = async (from, to, symbols, base = \"RUB\") => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${API_URL}/history?base=${base}&start_at=${from}&end_at=${to}&symbols=${symbols.join(\r\n        \",\"\r\n      )}`\r\n    );\r\n    return data;\r\n  } catch {}\r\n};\r\n\r\nexport { fetchRates };\r\n","import React, { useMemo } from \"react\";\r\nimport { Chart } from \"react-charts\";\r\n\r\nimport \"./HistoryChart.css\";\r\n\r\nconst axes = [\r\n  { primary: true, type: \"utc\", position: \"bottom\" },\r\n  { type: \"linear\", position: \"left\" }\r\n];\r\n\r\nconst HistoryChart = ({ history, symbols }) => {\r\n  const data = useMemo(\r\n    () =>\r\n      symbols.map(s => ({\r\n        label: s,\r\n        data: history.map(h => ({ x: h.date, y: 1 / h[s] }))\r\n      })),\r\n    [history, symbols]\r\n  );\r\n  return (\r\n    <div className=\"history-chart\">\r\n      <Chart data={data} axes={axes} tooltip />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HistoryChart;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { addDays, format } from \"date-fns\";\r\n\r\nimport HistoryTable from \"Components/HistoryTable\";\r\nimport { fetchRates } from \"Services/Currency\";\r\nimport HistoryChart from \"Components/HistoryChart\";\r\n\r\nconst INTERVAL = 1000; //интервал каждую секунду\r\nconst symbols = [\"USD\", \"EUR\"]; // список отображаемых валют\r\nconst MAX_LENGTH = 30; // кол-во дней запроса исторических данных\r\n\r\nconst today = new Date();\r\n\r\nconst Main = () => {\r\n  const [history, setHistory] = useState([]);\r\n  const [active, setActive] = useState(false);\r\n\r\n  const lastIntervalId = useRef();\r\n  const lastDate = useRef(addDays(today, -MAX_LENGTH + 1));\r\n\r\n  // при начальной загрузке подгружаем историю котировок\r\n  // за прошлые с 60 по 30 дни\r\n  useEffect(() => {\r\n    fetchRates(\r\n      format(addDays(today, -MAX_LENGTH * 2), \"yyyy-MM-dd\"),\r\n      format(addDays(today, -MAX_LENGTH), \"yyyy-MM-dd\"),\r\n      symbols\r\n    ).then(data => {\r\n      setHistory(\r\n        Object.keys(data.rates)\r\n          .map(date => ({\r\n            date: new Date(date),\r\n            ...data.rates[date]\r\n          }))\r\n          .sort((a, b) => a.date - b.date)\r\n      );\r\n      setActive(true);\r\n    });\r\n    return () => {\r\n      clearInterval(lastIntervalId.current);\r\n    };\r\n  }, []);\r\n\r\n  // начиная с 30 дней назад подгружаем историю каждую секунду по 1 дню до тек даты\r\n  // эмулируя работу в реальном времени\r\n  useEffect(() => {\r\n    if (active) {\r\n      let date = lastDate.current;\r\n      lastIntervalId.current = setInterval(() => {\r\n        if (date > today) {\r\n          return setActive(false);\r\n        }\r\n        const day = format(date, \"yyyy-MM-dd\");\r\n        fetchRates(day, day, symbols)\r\n          .then(data => {\r\n            if (data.error) {\r\n              // в случае ошибки с кодом 200 останавливаем интервал\r\n              setActive(false);\r\n              return console.log(data.error);\r\n            }\r\n\r\n            // если ответ без данных значит выходной либо праздник, пропускаем день\r\n            if (Object.keys(data.rates).length > 0) {\r\n              setHistory(h => [...h, { date, ...data.rates[day] }]); // добавляем в историю новые данные\r\n            }\r\n            lastDate.current = addDays(lastDate.current, 1); // запоминаем последний загруженный день чтобы иметь возм. приостанавливать/возобновлять интервал с последнего дня\r\n            date = addDays(date, 1); // сдвигаем дату на след день\r\n          })\r\n          .catch(er => {\r\n            // в случае общей ошибки\r\n            console.log(er);\r\n            setActive(false);\r\n          });\r\n      }, INTERVAL);\r\n    }\r\n    if (!active) {\r\n      clearInterval(lastIntervalId.current);\r\n    }\r\n  }, [active]);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setActive(!active)}>start/stop/continue</button>\r\n      <HistoryChart history={history} symbols={symbols} />\r\n      <HistoryTable history={history} symbols={symbols} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport \"./Layout.css\";\r\n\r\nconst Layout = ({ children }) => <div className=\"layout\">{children}</div>;\r\n\r\nexport default Layout;\r\n","import React from \"react\";\nimport { Switch, Route, HashRouter } from \"react-router-dom\";\nimport Main from \"Pages/Main\";\nimport Layout from \"Components/Layout\";\n\nimport \"./App.css\";\n\nfunction App() {\n  // здесь нет прямой необходимости в роутере, только для приличия\n  return (\n    <HashRouter basename=\"/\">\n      <Layout>\n        <Switch>\n          <Route exact path=\"/\">\n            <Main />\n          </Route>\n        </Switch>\n      </Layout>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}